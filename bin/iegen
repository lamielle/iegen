#!/usr/bin/env python

from __future__ import with_statement

def run_iegen():
	#Import various packages and objects so they are available to spec files
	import iegen,iegen.trans
	from iegen import Set,Relation,Symbolic

	#Get the spec file to run
	spec_file=process_cli_arguments()

	#Create the MapIR object
	spec=iegen.MapIR()

	#Run the specified spec file
	with open(spec_file) as f:
		exec(f)

	#Run IEGen given the previous spec file setup
	#Print the generated code if necessary
	iegen.print_code(spec.codegen())

#Parse and process command line arguments
#Ensure that exactly one spec file was given and that it exists
#Returns the spec file that was given
def process_cli_arguments():
	import os
	from optparse import OptionParser,OptionGroup
	import iegen

	#Create the option parser object
	parser=OptionParser(usage='%prog [settings] spec_file')

	#Quiet
	parser.add_option('-q','--quiet',action='store_true',dest='quiet',default=False,
	                  help='turn all printing except errors off')

	#Quiet
	parser.add_option('-v','--verbose',action='store_true',dest='verbose',default=False,
	                  help='turn all printing except debug on')

	#Debug
	parser.add_option('-d','--debug',action='store_true',dest='debug',default=False,
	                  help='enable debug mode')

	#Codegen options
	codegen_group=OptionGroup(parser,'Code Generation Options',
	              'Options related to the code generation process')
	codegen_group.add_option('','--gen-preamble',action='store_true',dest='gen_preamble',default=False,
	                         help='Generate the preamble code')
	codegen_group.add_option('','--gen-main',action='store_true',dest='gen_main',default=False,
	                         help='Generate a main driver function')

	#Add the codegen options group to the parser
	parser.add_option_group(codegen_group)

	#Output options
	output_group=OptionGroup(parser,'Output Options',
	             'The options in this group optionally take a file name. If one is given, output of the corresponding type is printed to that file. If no file name is given the output is printed to standard out.')

	#Build the output options based on those specified in iegen.settings.output_types
	for type,short,default,quiet,verbose,help in iegen.settings.output_types:
		#Position arguments
		args=(short,'--output-'+type)

		#Keyword arguments
		kwargs={'action':'callback','dest':'output_'+type,'default':[],'callback':output_callback,'help':help}

		#Add the option based on the arguments determined above
		output_group.add_option(*args,**kwargs)

	#Add the output options group to the parser
	parser.add_option_group(output_group)

	#Parse the specified arguments and return the result
	options,spec_file=parser.parse_args()

	#Make sure at most one of quiet and verbose was specified
	if options.quiet and options.verbose:
		parser.error('You may only specify quiet or verbose, not both')

	#Make sure exactly one spec file was given
	if 1!=len(spec_file):
		parser.error('Please specify exactly one spec file to run.')

	#Only one positional argument was given, so drop the list
	spec_file=spec_file[0]

	#Make sure the given spec file exists
	if not os.path.isfile(spec_file):
		parser.error("The given spec file, '%s', does not exist."%(spec_file))

	#Setup iegen.settings based on the CLI arguments
	#Load the values defined for quiet, verbose, or default
	outputs={}
	for type,short,default,quiet,verbose,help in iegen.settings.output_types:
		if options.quiet:
			outputs[type]=quiet
		elif options.verbose:
			outputs[type]=verbose
		else:
			outputs[type]=default

	#Load the debug setting
	iegen.settings.debug=options.debug
	if options.debug:
		outputs['debug']=list(set(outputs['debug']+[None]))

	#Load the codegen settings
	iegen.settings.gen_preamble=options.gen_preamble
	iegen.settings.gen_main=options.gen_main

	#Load any specific output settings
	for type,short,default,quiet,verbose,help in iegen.settings.output_types:
		outputs[type]=list(set(outputs[type]+getattr(options,'output_'+type)))

	#Assign the final outputs dictionary to the settings
	iegen.settings.outputs=outputs

	return spec_file

#This function is used as a callback for output options
#Its purpose is to determine, for the given output option, if the user wants
# these types of messages to be printed to stdout or to a file
#
#In general, if a file name is given after the option, it is used as the output
# file.  If no file exists after the option, then these types of messages are
# printed to stdout.
#
#Various corner cases exist and most of the code of this function handles these
# cases.
def output_callback(option, opt, value, parser):
	#No arguments left: no output file specified
	if 0==len(parser.rargs): file_name=None
	else:
		#Determine if the first of the remaining arguments is an option
		next_is_option=parser.has_option(parser.rargs[0])

		#One argument left
		if 1==len(parser.rargs):
			#Next argument is an option: no output file specified
			if next_is_option: file_name=None
			#Next argument is not an option
			else:
				#There are largs, we assume one of these is the spec file: use argument for output file
				if len(parser.largs)>0: file_name=parser.rargs.pop(0)
				#Assume the argument is the spec file: no output file specified
				else: file_name=None
		#More than one argument left
		else:
			#Next argument is an option: no output file specified
			if next_is_option: file_name=None
			#Next argument is not an option: use argument for output file
			else: file_name=parser.rargs.pop(0)

	#Set the file name that was determined from the above conditions
	#file_name will either be None or a string
	#Get the current value of the field option.dest in parser.values
	# and append the determined file name
	getattr(parser.values,option.dest).append(file_name)

if '__main__'==__name__:
	run_iegen()
