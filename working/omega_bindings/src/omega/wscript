#!/usr/bin/env python

import os
from waftools import *

default_omega_include_base='/s/europa/a/tmp/lamielle/omega/omega_csu'
default_omega_libs='lib/'

def set_options(opt):
	opt.tool_options('python')
	opt.tool_options('boost2')

	opt.add_option(
		'--omega-include-base',
		type='string',
		default=default_omega_include_base,
		dest='omega_include_base',
		help='Base directory of omega sources. (Default: %s)'%default_omega_include_base)

	opt.add_option(
		'--omega-libs',
		type='string',
		default=default_omega_libs,
		dest='omega_libs',
		help='Location of omega libraries. (Default: %s)'%default_omega_libs)

	opt.sub_options('parser')

def configure(conf):
	import Params,os

	env=conf.env
	opt=Params.g_options

	#Get the paths to the omega includes and libraries
	omega_include_base=getattr(opt,'omega_include_base','')
	omega_libs=getattr(opt,'omega_libs','')

	#Check for python and python headers
	conf.check_tool('python')
	conf.check_python_version((2,4,0))
	conf.check_python_headers()

	#Check for the boost libraries including boost.python
	conf.check_tool('boost2')
	boostconf=conf.create_boost_configurator()
	boostconf.lib=['python',]
	boostconf.threadingtag='st' #single threaded
	boostconf.lib_path=['/usr/lib64/']+boostconf.lib_path
	boostconf.run()

	#Math library
	libconf=conf.create_library_configurator()
	libconf.mandatory=1
	libconf.name='m'
	libconf.path=['/usr/lib64/']+libconf.path
	libconf.run()

	#Omega library
	libconf=conf.create_library_configurator()
	libconf.mandatory=1
	libconf.path+=[Params.g_cwd_launch+os.sep+omega_libs]
	libconf.name='omega'
	libconf.static=True
	libconf.run()

	#Codegen library
	libconf=conf.create_library_configurator()
	libconf.mandatory=1
	libconf.path+=[Params.g_cwd_launch+os.sep+omega_libs]
	libconf.name='code_gen'
	libconf.static=True
	libconf.run()

	#Omega include paths
	env['CPPPATH_OMEGA']+=[
		omega_include_base+'/include',
		omega_include_base+'/basic/include',
		omega_include_base+'/omega_lib/include',
		omega_include_base+'/code_gen/include']

	#Omega bindings includes
	env['CPPPATH_AST']+=['../../include/omega']

	#Omega defines (macros)
	env['CXXDEFINES_OMEGA']+=[
		'OMIT_QUANTIFY_CALLS',
		'SIG_HANDLER_HAS_ONE_ARG=1',
		'SHUT_UP_ABOUT_STATEMENT_WITH_NO_EFFECT_IN_DYNAMIC_ARRAY_CREATION',
		'BATCH_ONLY_PETIT',
		'DAVEW_THESIS_REDUCTIONS',
		'STUDY_KILL_USE',
		'PETIT_KILL_OBVIOUS']

	#Make sure we are bulding the object files for eventual dynamic linking
	env['staticlib_CXXFLAGS']+=['-fPIC', '-DPIC']

	#Some common values used by the whole project
	env['uselib_common']='BOOST_PYTHON PYEXT M CODE_GEN OMEGA OMEGA_BINDINGS'
	env['includes_common']=['include/omega',
	                        'include/omega/parser/ast',
	                        'include/omega/parser/ast/visitor']

	conf.sub_config('parser')

def build(bld):

	env=bld.env_of_name('default')

	inst_dir='omega'

	#Formula building sources
	create_obj_common(bld,
	               '''FExpr.cpp
	                  FPart.cpp
	                  FStmt.cpp
	                  FConj.cpp
	                  FreeVar.cpp
	                  FVar.cpp
	                  Var.cpp''',
	                 'omega_formula_building',2)

	create_obj_common(bld,
	               '''TupleCollection.cpp
	                  OldRelation.cpp
	                  OldSet.cpp
	                  Formula.cpp
	                  Set.cpp
	                  Relation.cpp''',
	                 'omega_formulas',2)

	create_obj_common(bld,
	               '''util.cpp
	                  OmegaException.cpp''',
	                 'omega_util',2)

	create_shlib_common(bld,
	                   'omega_bindings.cpp',
	                   'omega',
	                 '''omega_formula_building
	                    omega_formulas
	                    omega_util
	                    ast_var_nodes
	                    ast_expr_nodes
	                    ast_root_nodes
	                    ast_util''',
	                   inst_dir,2)

	install_files('PREFIX',inst_dir,'__init__.py')
	install_files('PREFIX',inst_dir,'_omega_py.py')

	bld.add_subdirs('parser')
