Explicit Relations
------------------
started 08/15/08

Explicit relations that need to be constructed
        1) access relation that will be input to data and loop permutations
            iterspace_to_data = { [a] -> [ k ] : k=inter1(a) }
                                union { [a] -> [ k ] : k=inter2(a) }
            iterspace_to_data := { [ii] -> [ sigma(inter1(ii)) ] }
                                union { [ii] -> [ sigma(inter2(ii)) ] }
            bounds for the domain are currently kept separate
            
            -these are essentially many-to-many
            -currently considering generating code that explicitly builds hypergraphs.  Could that code be simplified?  No because that code would still be constructing the explicit relations, not using them.
            
        2) relations used to create new index arrays due to collapsing index arrays
            { [ii] -> [k] : k=sigma(inter1(ii)) && bounds for inter1 input }
            { [ii] -> [k] : k=sigma(inter2(ii)) && bounds for inter2 input }
            
            These are one-to-one.
            
        3) turning transformed access relations into executor code?  I think this is related to the code generation required to generate code that computes the explicit relations
        
        4) data deps, which are many-to-many relations, but are accessed as one-to-many or many-to-one, probably accessed in order for the one.
        
        5) tiling uninterpreted function, many-to-one
            tile(x_1,x_2, ..., x_n) => tile
            -the domain is randomly accessed and written in the sparse tiling algorithms.  
            -to create a schedule it needs to be sorted by tile and then by other iterators that are not sparse.
            
        6) sparse sets, one-to-many
            foreach i in sched(x_1, x_2, ...x_n)
            -should be sorted lexicographically by x vector and preferably have i's sorted as well
            
        7) 1D index arrays  (eg. sigma, delta, inter1, inter2) are currently implemented with a 1D array.  Are typically accessed in order of domain.  These are functions and are one-to-one and onto.


Operations we need for explicit relations and their input and output tuples.
    // iterate over an already constructed explicit relation
    FOREACH_in_tuple(relation, in_tuple) {
        FOREACH_out_given_in(relation, in_tuple, out_tuple) {

    FOREACH_out_tuple(relation, out_tuple) {
        FOREACH_in_given_out(relation, out_tuple, in_tuple) {

    // special version of iterators for 1D-to-1D relations
    FOREACH_in_tuple_1d1d(relation, in_int) {
        FOREACH_out_given_in_1d1d(relation, in_int, out_int) {
        
    FOREACH_out_tuple_1d1d(relation, out_int) {
        FOREACH_in_given_out_1d1d(relation, out_int, in_int) {
    
    
    // construct a relation
    Relation_ctor(in_tuple_size, out_tuple_size);
    
    // insert entries into a relation
    Relation_insert(relptr, in_tuple, out_tuple); 
    // insertions are ordered lexicographically by in_tuple
    Relation_in_ordered_insert(relptr, in_tuple, out_tuple); 
    // insertions are ordered lexicographically by in_tuple concat out_tuple
    Relation_ordered_insert(relptr, in_tuple, out_tuple); 
    
    // Since we are compiling all of this stuff with C++, we can overload
    // all of the above routines to take in and out integers as well.
    
    // the above example would not be an ordered insert, therefore the 
    // Relation_finalize would need to organize things?
    // There should be different finalize calls to indicate how to 
    // organize?  Or maybe there should be prepare_for_access calls
    // that indicate how to prepare the relation for access.  That
    // makes sense, because at "finalization" time, we don't necessarily
    // know how the explicit relation will be used.
    Relation_order_by_in(relptr);
    Relation_order_by_out(relptr);   // is this possible?
    Relation_order_by_in_out(relptr);
    Relation_order_by_out_in(relptr);

    // constructing a tuple
    mytuple = Tuple(x_1, x_2, ..., x_n)
    
    // accessing entry k in a tuple
    // these should be macros
    // Where do I even need these?
    ... = Tuple_val(mytuple, k)
    Tuple_val(mytuple, k) = ...
    
    // Given an in tuple, return THE(?) out tuple.  
    // This suggests uninterpreted function symbol, because in a relation
    // could have one input go to many outputs.
    out_tuple = ER_out_given_in(relation, in_tuple)
        // should assert if this relation is not a function.

Maybe we do need different data structures given certain assumptions.
    - permutation, or one-to-one and onto function with same domain and range
    - function instead of relation
    - relation with 1D to 1D arity (seems orthogonal to the first two)
    - general relation

example relation
{[0,1]->[1,4], [0,1]->[1,2], [0,2]->[1,0]}

in_vals:    0 1 0 2
out_index:  0 4 6
out_vals:   1 4 1 2 1 0
in_arity = 2
out_arity = 2
in_count = 3

The above data structure could work for the specializations we will want.
    - permutation, how would this affect this implementation?  It affects the simplifications we can do at compile time and it suggests we can create the inverse.  Although for a relation we can always create the inverse.  Ah but the important thing about a permutation is also that the domain and range are the same.  Again won't affect this underlying implementation except that the 
        -in and out arity will be the same.  
        -Also when we calculate the inverse, the in_count should be the same for the inverse relation.
        -The out_index will be out_arity*0, out_arity*1, ... out_arity*k
        -When calculating inverse, we can keep the in_vals identical and just recalculate the out_vals.

    - if a function, which is the case for all permutations and groupings, if x=y then f(x) = f(y).  (possibly many-to-one)
        - can't necessarily compute inverse because could be many-to-one
        -The out_index will be out_arity*0, out_arity*1, ... out_arity*k, because each input tuple corresponds to only a single output tuple.
   
    - out arity is 1D, this doesn't help us by itself.
        
    - 1D to 1D and one-to-one (if x!=y then f(x)!=f(y)), true for a permutation of a 1D space
        - DO need to be inserted in order because not going to store in tuple values.  I guess the whether inserting in order is another feature.
        - do not need in_vals because can just assume in_vals are 1D index into out_vals
        - do not need out_index because know that each input value will index to one out_val
        - these will have 2 pointers and 3 integers of overhead, but one of those integers is the count, which was overhead we already had       
 
If not inserting in order, then must store in_vals.
-Should finalize sort by in_vals?
-when we are doing random access by in_vals and we have in_arity>1 will we have to do a binary search to find the necessary in val?  Or could we keep the count value in the tuple data structure and therefore enable random access?  How do we need to access tile information while building the tile function and then while using it to build a schedule?

If I create the tiling relation with the tile numbers as the input tuple, then I could have the finalization step always sort by input tuples.  That way the schedule would be set up already?  Is the schedule a relation as well?  Are sparse sets in general relations as well?

Main question is what should the tuple data structure be?
    -pointer to an array?
    -pointer to a structure that has a size field and a pointer to an array?
    -I don't think we can get away from dynamically allocating the tuple

Important Specializations
    - 1D-to-1D and function
        - only needs output_vals
        - FOREACH_out_given_in macro could be specialized to not loop
    - 1D-to-anything
        - only needs output_vals and out_index and size of out_tuple
        
8/17/08
-------
How would I rewrite CPackHyper (which should be named IAG_Cpack) with explicit relations?
    -taken array of flags would have to be a relation mapping the input tuple to a 1D output tuple of 1 or zero
    -NO, what old stuff that assumes 1D-to-1D to stay almost the same and get the benefit of the 1D-to-1D lack of overhead.
    -can have outer FOREACH check the sizeof() the variable being passed in to store the in or out tuple.  Won't work because we have typechecking done at compile time in C.  Also we should make specialness be transparent.
    
I think the tuple data structure should be a struct with an int * and int.  The int * will point at an array of ints or possibly into an existing array in a Relation.  The int will indicate how many ints are in the tuple.  Since it is so small, going to pass it around without doing dynamic allocation.  Might have to dynamically allocate the integer array it is pointing at if the tuple is not being accessed from a relation, but don't have to dynamically allocate the tuple itself.

8/21/08
-------
Ok, going to stick with just having the explicit relation, but we will have three orthogonal special cases?
    1) 1D-to-XD arity
        do NOT need in_vals
            -will have easy random access via input tuples
        in_tuple will just be an integer
        
    2) XD-to-1D arity
        out tuple will just be an integer
        
    3) relation is a function, each input only maps to one output
        do NOT need out_index and can make ER_out_given_in call
        
    4) insertion order?

Seems like I might be bending over backwards to implement this in C.  What if I use C++, then will STL make this easier?  I am a little gun shy about this because of the map problems we have had in OA.

8/25/08
-------
what about a sketch of creating the schedule?  The sparse sets for the schedule is a mapping from the tile space and output loop vars to a set of the innermost loop iterations.  Can use RectDomain from the tile space and the outer loop variables to indicate the domain for sparse set explicit relation.  However it is NOT a function.  We would like the executor to take advantage of the fact that the output tuple's are 1D.
    FOREACH relation in theta
        ER_insert(sched,
                  <tile_space_point,all_but_last_entry_in_input tuple>,
                  // FIXME: we will have to automatically generate the code
                  // that calculates the sparse set schedule because the size of
                  // the tuples cannot be generalized
                  last entry in in tuple)

Proposal for big change in implementation (8/25/08)
     Required functionality
        - Iterate over input tuple's in order.
        - Iterate over output tuple's in order.
        - Given an input tuple, iterate over all associated output tuples.
        - vice versa.
        - Given an input tuple provide the single associated output tuple, when the explicit relation is in fact a function.
        - get the lower and upper bounds for the input tuples or output tuples, used in IAG_CPACK
        
    Initial implementation thought
        Gather all explicit relations sequentially and keep track of needed information such as the rectangular bounds on tuples and then have a finalize step.
        Need a RectDomain data structure.
        
    Possible optimizations
     
    Possible Problem
        Creating tiling relation (theta) and querying it at the same time.  It is a function where we know the domain ahead of time and we need to take advantage of that fact in the explicit relation implementation.  Other examples of this include the permutations like sigma and delta.
        Could pass in the domain as rectangular bounds instead of that having to be discovered.  Also think we need to know if relation is a function so
        that only one spot is needed for the output tuple associated with each input tuple.


8/26/08
-------
RectDomain
    int *bounds;    // bounds[i*2] and bounds[i*2+1] respectively
                    // contain the lower and upper
                    // bounds for the ith dimension
                    
    int dim;        // dimensionality

    // Returns dimensionality of the rectangular domain.
    RD_dim()
    
    // Returns lower bound for the kth dimension
    RD_lb(int k)
    // Returns upper bound for the kth dimension
    RD_ub(int k)
    
    // Returns size for the kth dimension.
    // RD_size(k) = RD_ub(k)-RD_lb(k)+1
    RD_size(int k)
    
ExplicitRelation
    Now the constructor will be taking much more in terms of initial information about the explicit relation.
        in_arity
        out_arity
        
        isFunction  // If true indicates that each input tuple will map 
                    // to only one output tuple.
                    
        in_domain   // Domain for the input tuples.  If known at construction
                    // time then it is not necessary to finalize data structure
                    // for efficient access.
                    
        in_vals
        
        out_index
        
        out_vals
        
        raw_data
        
ER_ctor
    if isFunction and in_domain is provided then 
        -will not need out_index because each in_val only has one out_val
        -Going to use multi-dim array addressing arithmetic to index into out_vals.  Each point in the in_domain will need out_arity spaces to store the associated output_tuple.
            in_tuple: <x_0, x_1, ..., x_k>
            out_tuple will be stored at 
                out_vals[ (x_0*(LD_size(x_1)*...*LD_size(x_k)) 
                          + x_1*(LD_size(x_2)* ... *LD_size(x_k))
                          + x_k) * out_arity ]
    
    if in_domain provided, but do not know if it is a function
        -disallow calls to ER_out_given_in
        -instead of using the multidim array equation to index into out_vals will use it to index into out_index instead.  Need out_index to keep track of all the out tuples for a given in_tuple.
        -This is great, but since don't know number of out_tuples per in_tuple can only insert directly into this format if doing an ordered insert on the in_tuple.
        
    if isFunction, but no in_domain is provided.
        Without an in_domain specification, we can't sort until after everything is put in.  Therefore, I think that if no in_domain is provided, then we should have insert just put all of the relations into the raw data array.  Each entry will take in_arity+out_arity spots in the raw_data array.  insert can then keep track of the in_domain.
        The fact that it is a function just means that we don't need the out_index array.
    
ER_insert
    if isFunction and know in_domain then 
        set value in out_vals based on multidim array calculation.
            in_tuple: <x_0, x_1, ..., x_k>
            out_tuple will be stored at 
                out_vals[ (x_0*(LD_size(x_1)*...*LD_size(x_k)) 
                          + x_1*(LD_size(x_2)* ... *LD_size(x_k))
                          + x_k) * out_arity ]
                          
    else must put all relations in raw_data array, set ordered_by_in = false
    
    for either keep track of out domain as things are being inserted
        
ER_ordered_in_insert
    if isFunction and know in_domain then do the same as above
    
    else if know in_domain then
        index into out_index with same multidim array calculation
        
    else put all relations in raw_data array
        // FIXME: more optimization is possible here, but we may not need it.
        // We could record input tuples in the in_vals array and figure out the 
        // in domain.  Then the out_vals array could stay the same and just have
        // the out_index array change so that it is accessed using multidim
        // array computation and thus making the explicit relation randomly
        // accessible via the input tuple.

    for either keep track of out domain as things are being inserted

        
ER_order_by_in(relptr)
    if ordered_by_in not set then
        go through raw data and make it ordered by in
    
ER_order_by_out(relptr)
    if ordered_by_out not set then
        go through raw data and make it ordered by in
