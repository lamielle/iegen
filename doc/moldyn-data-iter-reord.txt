moldyn-data-iter-reord.txt
--------------------------
Started 7/16/08
Refers to uninter-operations.txt.

Showing all the details of how to automatically generate the inspector and executor for a data reordering followed by an iteration reordering on the following code:

    for (ii=0; ii<n_inter; ii++) {
        // simplified computations
S1        fx[inter1[ii]] += x[inter1[ii]] - x[inter2[ii]];
S2        fx[inter2[ii]] += x[inter1[ii]] - x[inter2[ii]];
    }

Notes
    - moldyn-FST.txt is an earlier version of this.  Main difference is that now we have the transformations clearly separated from optimization such as pointer update and array alignment.

    - detail for operations (compose, inverse, simplifications S1, etc.) referenced in here can be found in uninterp-operations.txt


-----------------------
What the user specifies
-----------------------

Symbolic Constants
    N                   // number of atoms
    N = new Symbolic ( name="N" )

    n_inter             // number of interactions between atoms
    n_inter = new Symbolic ( name="n_inter" )

Data Spaces
    X_0 := name = "x", { [k] : 0 <= k <= (N-1) }, data array
    FX_0 := name = "fx", { [k] : 0 <= k <= (N-1) }, data array
    INTER1_0 := name = "inter1", { [k] : 0 <= k <= (n_inter-1) }, index array
    INTER2_0 := name = "inter2", { [k] : 0 <= k <= (n_inter-1) }, index array

Index Arrays

    inter1 = new IndexArray (
        name = "inter1",
        dataspace = INTER1_0,
        isPermutation = false,
        input_bounds = { [k] : 0 <= k <= (n_inter-1) },
        output_bounds = { [k] : 0 <= k <= (N-1) }
    )
    inter2 = new IndexArray (
        name = "inter2",
        dataspace = INTER2_0,
        isPermutation = false,
        input_bounds = { [k] : 0 <= k <= (n_inter-1) },
        output_bounds = { [k] : 0 <= k <= (N-1) }
    )

Inputs and Outputs for full computation
    Input data spaces: x, fx, inter1, inter2
    Input symbolics: n_inter
    Output data spaces: fx

Statements
    S1:  "`a1 += `a2 - `a3;"
    S2:  "`a4 += `a5 - `a6;"

    Original Iteration Space for each statement
        IS_{S1} = {[ii] : 0 <= ii <= (n_inter-1) }  // never changes
        IS_{S2} = {[ii] : 0 <= ii <= (n_inter-1) }  // never changes

    Scattering function, which represents original schedule for statement
        scatter_{S1} = {[ii] -> [ii,j] : j=1}    // theta_s(ii) = (ii,1)
        scatter_{S2} = {[ii] -> [ii,j] : j=2}    // theta_s(ii) = (ii,2)

    Access Relations
        These actually need to be specified per data access in each statement.

    statement   access#     DataSpace   AccessRelation
    S1          a1           FX_0        { [ii] -> [k] : k=inter1(ii) }
    S1          a2           X_0         { [ii] -> [k] : k=inter1(ii) }
    S1          a3           X_0         { [ii] -> [k] : k=inter2(ii) }

    S2          a4           FX_0        { [ii] -> [k] : k=inter2(ii) }
    S2          a5           X_0         { [ii] -> [k] : k=inter1(ii) }
    S2          a6           X_0         { [ii] -> [k] : k=inter2(ii) }

Data Dependences
    Only reduction dependences.  It is important to indicate that there are reduction dependences however, because that means each iteration needs to be executed atomically if the loop is being parallelized.
    FIXME: how will we indicate reduction dependences?

Composition and choice of RTRTs
    data reordering
        DataPermuteRTRT
            data_reordering = { [ k ] -> [ r ] : r=sigma( k ) }
            data_spaces = [ X_0, FX_0 ]
            iter_sub_space_relation = { [ ii, j ] -> [ ii ] }
            target_data_space = X_0
            iag_func_name = IAG_cpack

    Naming standards
        After a transformation, we are going to assume that a space with the subscript n will be transformed into the same named space with the subscript n+1.  For example I_0 will become I_1.

    iteration reordering
        IterPermuteRTRT
            iter_reordering = { [ i,x ] -> [ k,x ] : k = delta( i ) }
            iteration_space = I_0
            access_relation = A_I_0_to_X_1
            iter_sub_space_relation = { [ ii, j ] -> [ ii ] }
            iag_func_name = IAG_lexmin
            iag_type = IAG_Permute

-------------------------------------------------------------
Automatically Generating Straight-Forward Inspector/Executor:
-This is done in two phases:
1) Perform any necessary calculations and modifications to the
   access relations, scattering functions, etc.
2) Generate code based on the previous calculations and the
   input from the user
-------------------------------------------------------------

=====Calculation Phase=====

1) Calculate the full iteration space for the computation:

   Generate a Set that represents the full iteration space based on all of the statement scattering functions.
    input:
        the collection of statements (with their scattering functions)

    output:
        I_0 = Union_{over all statements S}  scatter_S compose IS_S

    For this example:
        I_0 = (scatter_{S1} compose IS_{S1})
              union (scatter_{S2} compose IS_{S2})
            = ({[ii] -> [ii,j] : j=1} compose {[a] : 0 <= a <= (n_inter-1) })
              union ({[ii] -> [ii,j] : j=2} compose {[a] : 0 <= a <= (n_inter-1) })
                // apply composition
            = {[ii,j] : ii=a && j=1 && 0 <= a <= (n_inter-1)}
              union {[ii,j] : ii=a && j=2 && 0 <= a <= (n_inter-1)}
                // apply S1
            = {[ii,j] : j=1 && 0 <= ii <= (n_inter-1)}
              union {[ii,j] : j=2 && 0 <= ii <= (n_inter-1)}
              //Could further simplify to the following:
            = {[ii,j] : 1<=j && j<=2 && 0 <= ii <= (n_inter-1)}

    Note:
        This is output that we will want to share with a user of our system to help them in the specification of RTRTs.

2) Calculate an AccessRelation specification that will be input for data reordering
        input:
            the collection of statements (with their scattering functions)
            DataPermuteRTRT

        output:
            AccessRelation artt;    // access_relation_to_traverse

        algorithm:
            Intuitively we want to take each access relation to the target data space and expand its domain to the full iteration space using the statements scattering function.  Then restrict the iteration space to the subspace on which the data reordering will depend.  If the original iteration space domain for the access relation does not overlap with the subspace for the transformation, then the access relation will be empty.

            artt = new AccessRelation (
                name = "A_I_sub_to_TARGET",
                iter_space = iter_sub_space_relation ( I_0 ),
                data_space = DataPermuteRTRT.target_data_space,
                iter_to_data =
                    Union_{over all statements S}
                        Union_{over each access relation A to DataPermuteRTRT.target_data_space}
                            inverse (DataPermuteRTRT.iter_sub_space_relation compose (scatter_S compose (inverse A)))

        For the example, output is the following:
          access_relation_to_traverse, artt = new AccessRelation (
                name = "A_I_0_sub_to_X_0",
                iter_space = { [ii] : 0 <= ii < n_inter  },
                data_space = X0,
                iter_to_data = { [a] -> [ k ] : k=inter1(a) }
                                    union { [a] -> [ k ] : k=inter2(a) }
          )

          How we calculated iter_to_data:
            inverse ({ [ ii, j ] -> [ ii ] } compose (scatter_{S1} compose (inverse a2)))
            union
            inverse ({ [ ii, j ] -> [ ii ] } compose (scatter_{S1} compose (inverse a3)))
            union
            inverse ({ [ ii, j ] -> [ ii ] } compose (scatter_{S2} compose (inverse a5)))
            union
            inverse ({ [ ii, j ] -> [ ii ] } compose (scatter_{S2} compose (inverse a6)))

                // apply inverse and then composition
            = inverse ({ [ ii, j ] -> [ ii ] } compose {[k]->[ii,j] : j=1 && k=inter1(ii)})
            union
            ...
                // apply compose and then inverse
            = {[ii] -> [k] : j=1 && k=inter1(ii)}
            ...
                // apply S1
            = {[ii] -> [k] : k=inter1(ii)} union
              union {[ii] -> [k] : k=inter2(ii) }

3) Calculate the IAG (index array generator) and IndexArray specification for sigma
    This algorithm should be implemented by passing the appropriate parameters to the IAG_Permute constructor.  See MapIR-design.txt for more info.
        input:
            DataPermuteRTRT instance
            access_relation_to_traverse

        output:
            iag_spec = new IAG_Permute(
                String name = rtrt.iag_func_name
                AccessRelation input = artt
                IndexArray result = new IndexArray(
                    data_space = [name of uninterp func in data_reordering],
                                 [specification from data space in RTRT],
                                 index array,
                    isPermutation = true,
                    input_bounds = [ Set that describes data space ],
                    output_bounds = [ Set that describes data space ]
                )
            )

        Initial Assumptions:
            -only one interpreted function in data reordering
            -that uninterpreted function has a domain with dimensionality 1

        For this example:
            IAG_cpack = new IAG_Permute (
                String name = "IAG_cpack"       // function name
                AccessRelation input = artt
                IndexArray result = new IndexArray(
                    data_space = "sigma", X_0.spec, index array,
                    isPermutation = true,
                    input_bounds = { [k] : 0 <= k <= (N-1) },
                    output_bounds = { [k] : 0 <= k <= (N-1) }
                )

            )

4) Modify data dependences, scattering functions, and access functions based on previous transformation.

    // Data in X and FX have been permuted, but their data space
    // description have not been changed.
    X_1 := X_0    // same size
    FX_1 := FX_0    // same size

    // Scattering functions
    // A data permutation does not affect the scattering/scheduling functions.
    scatter_{S1} and scatter_{S2} stay the same.

    // Access Relations
    // Each access relation that targets the arrays that were reordered (in this
    // case x and fx) need to have the data reordering relation applied to them.

    a1_1 = data_reordering(a1) = data_reordering compose a1
         = { [ k ] -> [ r ] : r=sigma( k ) ] } compose { [ii] -> [ k ] : k=inter1(ii) }
         = { [ii] -> [ r ] : r=sigma( k ) && k=inter1(ii) }
            // apply S1
         = { [ii] -> [ r ] : r=sigma( inter1(ii) ) }

    a2_1 = data_reordering(a2)
    ...
    a6_1 = data_reordering(a6)

5) Determine the parameters for the inspector and executor functions.

    Currently the parameters to these two functions are the same:
    -One parameter for each non-index array dataspace: type double*
    -One parameter for each index array: type int*
    -One parameter for each symbolic parameter: type int
    -One parameter for sigma: type ExplicitRelation**
    -One parameter for delta: type ExplicitRelation**

    In this example, the inspector and executor have the following signatures:
    void inspector(double *fx,double *x,int *inter1,int *inter2,int n_inter,int N,ExplicitRelation **sigma,ExplicitRelation **delta)
    void executor(double *fx,double *x,int *inter1,int *inter2,int n_inter,int N,ExplicitRelation **sigma,ExplicitRelation **delta)

=====Code Generation Phase=====

Generating the composed inspector

1) DataPermuteRTRT

    a) generate code that creates explicit representation of access relation at runtime. (see src/dev/test_ExplicitRelation.c for example usage)
        input:
            access_relation_to_traverse, artt
        output:
            code
                // output tuple calculation  for each conjunction in
                // access relation.
                // Will capture the pointer to the explicit relation
                // for the access relation ([artt.name]) and pointers to
                // explicit relations for any index arrays.
                #define s1(i_1, ..., i_d) \
                    ExplicitRelation_in_ordered_insert([artt.name], \
                        Tuple_make(i_1, ..., i_d),  \
                        Tuple_make([expressions for output tuple vals]);
                    ...


                // initialize variables
                ExplicitRelation* [artt.name] =
                    ExplicitRelation_ctor([artt.in_arity],[artt.out_arity]);

                int t1, ..., ;  // declare index variables omega will use

                // loop that traverses [artt.iter_space or Domain(artt)]
                // (Qrelation1)
                for ...
                    s1(i_1, ..., i_d);

                // between the above code and the next piece of the
                // inspector, only [artt.name] variable needs passed.
                // It is the pointer to the ExplicitRelation.

          For the example, output is the following:
                // this macro captures A_I_0_sub_to_X_0 inter1_ER and inter2_ER.
                #define s1(t1) \
                    ExplicitRelation_in_ordered_insert(A_I_0_sub_to_X_0,
                        Tuple_make(t1), \
                        ER_out_given_in(inter1_ER, Tuple_make(t1)) ); \
                    ExplicitRelation_in_ordered_insert(artt,
                        Tuple_make(t1), \
                        ER_out_given_in(inter2_ER, Tuple_make(t1)) );

                // initialize variables
                ExplicitRelation* A_I_0_sub_to_X_0 = ExplicitRelation_ctor(1,1);

                // this specific example
                for(t1 = 0; t1 <= n_inter-1; t1++) {
                    s1(t1);
                }

    b) generate code that passes explicit relation to IAG
    Note: could have IAG call the ER_ctor, but we want to have "library" programmers do the least amount of work possible.

        input:
            iag_spec for sigma

        output:
            code
                RectDomain * in_domain
                    = RD_ctor( [iag_spec.result.input_bounds.arity] )
                RD_set_lb(in_domain, 0, [iag_spec.result.input_bounds.lb ] );
                RD_set_ub(in_domain, 0, [iag_spec.result.input_bounds.ub ] );
                ... // set lb and ub for each dimension of input_bounds

                ExplicitRelation * [iag_spec.result.data_space.name]
                    = ER_ctor( [iag_spec.result.input_bounds.arity],
                               [iag_spec.result.output_bounds.arity],
                               in_domain,
                               [iag_spec.result.isPermutation] );

                [iag_spec.name]( [iag_spec.input.name],
                                 [iag_spec.result.data_space.name] );

        For this example:
                RectDomain * in_domain = RD_ctor(1);
                RD_set_lb(in_domain, 0, 0);
                RD_set_ub(in_domain, 0, n_inter-1);
                ExplicitRelation * sigma = ER_ctor(1,1,in_domain,true);
                IAG_cpack( artt, sigma );

    c) generate code that does data reordering
    Note: eventually all the data reordering will be done only once per composition.  This example has only one data reordering.

        input:
            iag_spec for sigma
            DataPermuteRTRT.data_spaces to be reordered

        output:
            code that reorders the specified data spaces with sigma
            // one call to reorderArray for each data space being reordered
            // The last parameter should be a pointer to an explicit relation
            // that contains the data permutation mapping.
            reorderArray((unsigned char*) [data_space.name],
                         sizeof([data_space.datatype]),
                         [data_space.num_elem],
                         [iag_spec.name])

        For this example:
            reorderArray((unsigned char *)x, sizeof(double), NUM_NODES, sigma);
            reorderArray((unsigned char *)fx, sizeof(double), NUM_NODES, sigma);

2) generate executor code for data reordering only (only for testing)
   Note: eventually we want to generate the composed inspector/executor only, but for testing we need to be able to test as we go.

    input:
        Statement scattering functions and transformed statement access relations

    output:
        // statement macros
        #define s1(t1, ..., ) ...

        ...

        // new executor loop
        for ...

    algorithm:
        -for each statement in computation
            generate macro code for statement using transformed access relations
                - for uninterpreted function symbols that are associated with
                data spaces that are input to the original computation, generate
                array accesses.  For uninterp function symbols that are
                associated with index arrays created by the inspector, generate
                ER_out_given_in calls.

        -have omega or Cloog generate code for each statement's current iteration space and scattering function


    output for this example:
        // without pointer update
        #define e1(ii,g)    if ((g)==1) { \
            fx[ER_out_given_in(sigma,inter1[ii])] \
                     += x[ER_out_given_in(sigma,inter1[ii])]*0.1 \
                     + x[ER_out_given_in(sigma,inter2[ii])]*0.3; \
        } else { \
            fx[ER_out_given_in(sigma,inter2[ii])] \
                     += x[ER_out_given_in(sigma,inter1[ii])]*0.2  \
                     + x[ER_out_given_in(sigma,inter2[ii])]*0.4; \
        }

        // with pointer update
        #define e1(ii,g)    if ((g)==1) { \
            fx[ER_out_given_in(inter1_1,ii) \
                    += x[ER_out_given_in(inter1_1,ii)]*0.1 \
                     + x[ER_out_given_in(inter2_1,ii)]*0.3; \
        } else { \
            fx[ER_out_given_in(inter2_1,ii)] \
                    += x[ER_out_given_in(inter1_1,ii)]*0.2  \
                     + x[ER_out_given_in(inter2_1,ii)]*0.4; \
        }

        ...

        // executor - execute the computation with modified arrays
        for(t1 = 0; t1 <= n_inter-1; t1++) {
            e1(t1,1);
            e1(t1,2);
        }

3) (optional) pointer update optimization, or collapsing index arrays
After performing a data reordering, if index arrays that access the reordered data arrays are updated with the new locations of data elements then later inspectors and the final executor will require fewer indirect accesses.  See uninterp-operations.txt for the definition of PU#.
    PU0) note that all of the access relations for the statements (a1_1 through a6_1) contain sigma(inter1(ii)) or sigma(inter2(ii))

    PU1) { [ii] -> [k] : k=sigma(inter1(ii)) && bounds for inter1 input }
         { [ii] -> [k] : k=sigma(inter2(ii)) && bounds for inter2 input }

    PU2) Do Code Gen for Relation to generate inter1_1 and inter2_1
        #define pu1(t1) inter1_1[t1] = sigma[inter1[t1]]
        for (t1=bounds for inter1 input) {
            pu1(t1)
        }
        // similar for inter2_1

    PU3) modify all access relations by replacing sigma(inter1(t1)) with inter1_1(t1)

10/20/08, MMS LEFTOFF
5) IterPermuteRTRT  (for now done assuming no pointer update has occurred)
    a) restrict access_relation to iteration subspace (same as 1a above)

        For the example, output is the following:
            access_relation_to_traverse = new AccessRelation
                name = "A_I_0_to_X_1"
                iter_space = { [ii] : 0 <= ii < n_inter  }
                data_space = X_1
                iter_to_data := { [ii] -> [ sigma(inter1(ii)) ] }
                                     union { [ii] -> [ sigma(inter2(ii)) ] }

    b) generate code that explicitly creates hypergraph generate code that explicitly creates hypergraph representation of access relation at runtime. (same as 1b above)


        For the example, output is the following:
                // this macro captures A_I_0_to_X_1,
                // count, sigma, inter1, inter2, and data_index
                #define s2(t1) data_index = sigma[inter1[t1]]; \
                        Hypergraph_ordered_insert_node(A_I1_to_X1,count, \
                        data_index); \
                        data_index = sigma[inter2[t1]]; \
                        Hypergraph_ordered_insert_node(A_I1_to_X1,count, \
                        data_index); \
                        count++

                {
                // initialize variables
                Hypergraph* A_I_0_to_X_1 = Hypergraph_ctor();
                int count=0;
                int data_index=0;

                // this specific example
                for(t1 = 0; t1 <= n_inter-1; t1++) {
                    s2(t1);
                }

                Hypergraph_finalize(A_I_0_to_X_1);
                }


    c) Automatically generate the IndexArray specification for delta.
    FIXME: Should this algorithm be a method associated with IterPermuteRTRT?
        input:
            IterPermuteRTRT instance
            access_relation_to_traverse

        output: (almost the same as 1c, just replace data space with iteration space)
            iag_spec = new IAG_Permute(
                String name = rtrt.iag_func_name
                AccessRelation input = access_relation_to_traverse
                IndexArray result = new IndexArray(
                    data_space = [name of uninterp func in iter_reordering],
                                 [rtrt.iter_space],
                                 index array,
                    isPermutation = true,
                    input_bounds = [ (same bounds as for data space) ],
                    output_bounds = (same bounds as for data space)
                )
            )

        Initial Assumptions:
            -only one interpreted function in iteration reordering
            -that uninterpreted function has a domain with dimensionality 1, FIXME: this is not the case for sparse tiling, so why do we have this assumption.  Maybe we need this assumption to only apply reordering to one loop?


        For this example:
            IAG_lexmin = new IAG_Permute (
                String name = "IAG_lexmin"       // function name
                AccessRelation input = A_I_0_to_X_1
                IndexArray result = new IndexArray(
                    data_space = "delta", I_0.spec, index array,
                    isPermutation = true,
                    input_bounds = [(0 .. (n_iter-1))],
                    output_bounds = (0 .. (N-1))
                )

            )

    d) generate code that passes hypergraph to IAG (same as 1d)

        For this example:
                int *delta;
                MALLOC(delta,int,n_iter);
                IAG_lexmin( A_I_0_to_X_1, delta );

6) Modify iteration space and access functions based on previous transformation.
Since doing a loop permutation, going to modify access relations and NOT the iteration space.  However, going to rename iteration space to indicate that in essence it has been reordered.

    I_1 = I_0       // use same bounds for newly permuted iteration space
    X_1 and FX_1    // were not modified
    A_I_1_to_X_1 =  A_I_1_to_X_1 compose (inverse iter_permute)
                 = { [ii,j] -> [r] : r=sigma( inter1(ii) ) && 1<=j<=2 } ... compose ( [a,b] -> [i,b] : a = delta(i) }
                    // compose 2 relations
                = { [a,b] -> [r] : ii=i && b=j && r=sigma(inter1(ii)) && 1 <=j<=2 && a=delta(i) }
                    // apply S1
                = { [a,b] -> [r] : r=sigma(inter1(i)) && 1 <=b<=2 && a=delta(i)}
                    // apply S3
                = { [a,b] -> [r] : r=sigma(inter1(i)) && 1 <=b<=2 && i=delta_inv(a)}
                    // apply S1 on i = delta_inv(a)
                = { [a,b] -> [r] : r=sigma(inter1(delta_inv(a))) && 1 <=b<=2}

7) (optional) collapsing index arrays, pointer update and array alignment

    Generate code to create new_iag().

    Update access relations.
    { [a,b] -> [r] : r=sigma(inter1(delta_inv(a))) && 1 <=b<=2 && i=delta_inv(a)}
        // apply collapsing index arrays to sigma(inter1(delta_inv(a)))
    { [a,b] -> [r] : r=new_iag(a) && 1 <=b<=2 }

