see moldyn-data-iter-reord.txt and moldyn-FST-v2.txt(not yet) for examples of using this code generation algorithm.

--------------------------
Code generation algorithms

    gen_composed_inspector: (RTRTs, mapIR, options)
                            -> (mapIR, inspector_function_code)
        Performs input and output calculation pass, inter-transformation optimization (ITO) calculation passes, and then a code generation pass in order to generate the composed inspector function.  Each of the calculations passes modify the scattering functions and access relations in MapIR for use in the generation of executor code.
        The options include (collapsing uninterpreted functions as we go OR at end of inspector OR never).
        The options will eventually also include (single data remapping OR remapping as we go) and (some choices about data realignment).

        Algorithm

            //// FIRST Pass: calculates input and output relations
            for each rtrt in RTRTs:

                (rtrt.inputERs, rtrt.inputSymbolics) = rtrt.calc_input( mapIR )

                rtrt.outputERs = rtrt.calc_output( mapIR )

                // this call also modifies mapIR
                rtrt.simplificationERs = rtrt.calc_apply_reord( mapIR )


            //// SECOND set of passes: inter-transformation optimizations

            // option: collapse uninterp functions
            if option.collapse == as_we_go:
              loop over the following until no more nesting found:
                // 1) look through all relations in RTRTs in order
                // 2) create ITO ER if find nested uninterp functions
                // 3) modify all later relations by replacing nests

            else if option.collapse == end of inspector
              loop over the following until no more nesting found:
                // 1) look at final relations in MapIR (scattering and access)
                // 2) create ITO ER if find nested uninterp functions
                // 3) modify all other relations by replacing nests


            // option: data realignment
                // FIXME: I think that here as with the array collapsing
                // we want to find obvious places to do data alignment.
                // For example, we should just find all arrays that are
                // always accessed with the same uninterp function and
                // perform a data reordering based on that uninterp function.

            // option: single data mapping
            if option.remap_data = only_once:
                // FIXME: where do we keep track of data reord compositions




            //// CODE GENERATION pass for composed inspector
            for each rtrt in RTRTs:

                for each relation in rtrt.input_ERs:
                    generate code to construct ER for relation

                generate call to ERG (reordering algorithm)
                    // like old (1b)
                    pass in all input_ERs
                    later: might be passing in other inputs

                for each relation in rtrt.simplification_ERS:
                    generate code to construct ER for relation

                for each relation in rtrt.ito_ERS:
                    generate code to construct ER for relation

                // option: remapping data after each data reordering
                // 11/10, MMS, for now assume this is the case
                if option.remap_data = as_we go:
                    // Assumption: Right now this works for permutations, but we
                    // don't have projections or embeddings figured out yet.

                    for each remap in rtrt.calc_data_remap()
                        gen_data_remap( remap.data_space, remap.relation_name )


    gen_executor: mapIR -> executor_function_code
        Given the transformed mapIR generates an executor function.

        Algorithm:
            // calculate inputs and outputs
            // (1) output should be output in computation specification.
            // (2) determine input by traversing all scattering functions,
            // iteration spaces, and access relations and call calc_params
            // to determine what symbolic vars, data spaces, and ERs are
            // needed.

            // code gen
            for each statement in MapIR:
                Use original iteration space and scattering function to create cloog specification for that statement.

                Use access relations in statement to generate string for that statement.



Assumptions
    - After any operations involving relations and/or sets (i.e. composing two relations), all existentially quantified variables except those that are actual parameters to uninterpreted function symbols will be projected out using FM.  The ones that are parameters to uninterpreted function symbols will be dealt with if possible by the permutation inversion simplification.



----------------------------------
RTRT interface

  Members
    Input ERs: relations
        List of relations that need to be constructed at runtime before calling
        reordering algorithm.

    Output ERs: relations
        List of relations that will be available after reordering algorithm is
        called.

    Simplification ERs: relations
        List of relations that need to be constructed after reordering algorithm
        is called so as to enable hybrid simplifications (simplifications with
        compile-time and run-time components).

    ITO ERs: relations
        List of relations that need to be constructed for various
        inter-transformation optimizations.

  Methods
    calc_input: (RTRTspec, mapIR) -> (relations, symbolics)
        Returns set of relations that the reordering algorithm will need as input.  Also returns a list of symbolic variables that may be needed by the reordering algorithm (e.g. number of partitions).  Does not need to return the symbolics, data spaces, and other ERs needed to generate code for the input ER, because calc_params can do that when generating code to create the input ER.

    calc_output: (RTRTspec, mapIR) -> relations
        Returns the set of relations that the reordering algorithm will generate as output.  FIXME: should the description for that relation also be in MapIR?

    calc_apply_reord: (RTRTspec, mapIR) -> relations
        Uses calc_apply_data_reord, calc_apply_iter_reord, or nothing as necessary to indicate the effect of the RTRT on the access relations and scattering functions.  mapIR is modified as a side effect because it contains the scatter functions and access relations.  This method might generate simplification relations that must have ERs created for them at runtime.

    calc_data_remaps: (RTRTspec) -> (data space, relation name) pairs
        Will return a list of (data space, relation name) pairs that indicate what data reorderings should be done for the current RTRT.  Need relation name because will be passing a pointer to that relation to a various routines at runtime so gen_data_remap needs a name instead of just a relation description.

----------------------------------
Utilities
    calc_params: (relation or set, mapIR)
                 -> (data_spaces, symbolic vars, relations)
        Given a relation and an instance of the MapIR returns the  data_spaces,  symbolic vars, and relations needed to explicitly compute that relation.

    calc_full_iter_space: statements -> Set
        Generate a Set that represents the full iteration space based on all of the statement original iteration spaces and current scattering functions.  Might want to compute this based on scattering functions after each RTRT so user can more easily write iteration reordering relations and iteration space restriction relations.

    calc_apply_data_reord: (data_reord_relation, data_spaces, mapIR) -> mapIR
        Modifies the access relations in the mapIR based on the specified
        data reordering relation being applied to the given data spaces.  Might generate inverse ER specifications (?), if such inverses are necessary to simplify resulting relations.

    calc_apply_iter_reord: (iter_reord_relation, iter_sub_space_relation, mapIR)
                           -> mapIR
        Modifies the access relations, data dependences, and scattering functions in the mapIR based on the specified iteration reordering relation being applied to the subset of the iteration space specified mapping the full iteration space to a subset with the iteration sub-space relation.
        This method will use calc_full_iter().
        Might generate inverse ER specifications (?), if such inverses are necessary to simplify resulting relations.


    gen_data_remap: (data space, relation name) -> code
        Generates code that reorders the specified data space with the given relation.  Need relation name to so as to pass pointer to the associated ER at runtime into a run-time remapping routine.
        Code generated:
            // The last parameter should be a pointer to an explicit relation
            // that contains the data permutation mapping.
            reorderArray((unsigned char*) [data_space.name],
                         sizeof([data_space.datatype]),
                         [data_space.num_elem],
                         [relation name])


