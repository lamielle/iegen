# Omega Calculator experimentation that corresponds to notes in
# moldyn-FST.txt

# n_inter is the number of interactions
# N is the number of atoms
# inter1 and inter2 maintain the interaction list
symbolic n_inter, N, inter1(1), inter2(1);

# iteration space
I_0 := { [ii,1] : 0 <= ii <= (n_inter-1)  }
          union { [ii,2] : 0 <= ii <= (n_inter-1)  };

# data spaces
X_0 := { [k] : 0 <= k <= (N-1) };
FX_0 := { [k] : 0 <= k <= (N-1) };
INTER1_0 := { [k] : 0 <= k <= (n_inter-1) };
INTER2_0 := { [k] : 0 <= k <= (n_inter-1) };

# access relation
A_II0_to_X0 := { [ii,1] -> [ inter1(ii) ] } 
               union { [ii,1] -> [ inter2(ii) ] };

# DataPermuteRTRT.iter_sub_space_relation
iss_relation := { [ ii, 1 ] -> [ ii ] };

# access relation to traverse
iter_space := iss_relation ( I_0 );
iterspace_to_data := inverse (iss_relation compose (inverse A_II0_to_X0));
iterspace_to_data;

# loop that traverses [artt.iter_space]
codegen iter_space;

##### generating the executor

# the data spaces were transformed so the data access relations 
# must be transformed

# example original access relations
ar_1_1 := { [ii,1] -> [ inter1(ii) ] };
ar_1_3 := { [ii,1] -> [ inter2(ii) ] };
# transforming them
symbolic sigma(1);
data_reordering := { [ k ] -> [ sigma( k ) ] };
data_reordering(ar_1_1);
data_reordering(ar_1_3);
# ALAN: output of the above currently has an UNKNOWN.  This is due to the
# compose with uninterpreted functions issue.  The results should be as
# follows:
#   {[ii,1] -> [Out_1] : Out_1 = sigma( inter1(ii) ) }
#   {[ii,1] -> [Out_1] : Out_1 = sigma( inter2(ii) ) }



# the original iteration space was not transformed
codegen I_0;
