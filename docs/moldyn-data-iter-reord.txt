moldyn-data-iter-reord.txt
--------------------------
Started 7/16/08
Refers to uninter-operations.txt.

Showing all the details of how to automatically generate the inspector and executor for a data reordering followed by an iteration reordering on the following code:

    for (ii=0; ii<n_inter; ii++) {
        // simplified computations
        fx[inter1[ii]] += x[inter1[ii]] - x[inter2[ii]];
        fx[inter2[ii]] += x[inter1[ii]] - x[inter2[ii]];
    }

Notes
    - moldyn-FST.txt is an earlier version of this.  Main difference is that now we have the transformations clearly separated from optimization such as pointer update and array alignment.

    - detail for the algorithms referenced in here can be found in uninterp-operations.txt


-----------------------
What the user specifies
-----------------------
Iteration Space
    I_0 := { [ii,j] : j=1 && 0 <= ii <= (n_inter-1)  }
           union { [ii,j] : j=2 && 0 <= ii <= (n_inter-1)  }

Symbolic Constants
    N                   // number of atoms
    n_inter             // number of interactions between atoms

    // uninterp functions for index arrays,
    // [0..(n_inter-1)] indicates range of possible parameter values
    // [0:N] indicates range of possible values
    // FIXME: might want to use this approach of representing IndexArray
    // constraints versus using the OmegaRelation that we currently have
    // in the MapIR design.
    inter1([0..(n_inter-1)]):[0..N]
    inter2([0..(n_inter-1)]):[0..N]


Data Spaces
    X_0 := name = "x", { [k] : 0 <= k <= (N-1) }, data array
    FX_0 := name = "fx", { [k] : 0 <= k <= (N-1) }, data array
    INTER1_0 := name = "inter1", { [k] : 0 <= k <= (n_inter-1) }, index array
    INTER2_0 := name = "inter2", { [k] : 0 <= k <= (n_inter-1) }, index array

Statements
    [ii,1]  "`a1 += `a2 - `a3;"
    [ii,2]  "`a4 += `a5 - `a6;"


Access Relations
    These actually need to be specified per data access in each statement.

    statement   access#     DataSpace   AccessRelation
    [ii,1]      a1           FX_0        { [ii,j] -> [k] :j=1 && k=inter1(ii) }
    [ii,1]      a2           X_0         { [ii,j] -> [k] :j=1 && k=inter1(ii) }
    [ii,1]      a3           X_0         { [ii,j] -> [k] :j=1 && k=inter2(ii) }

    [ii,2]      a4           FX_0        { [ii,j] -> [k] :j=2 && k=inter2(ii) }
    [ii,2]      a5           X_0         { [ii,j] -> [k] :j=2 && k=inter1(ii) }
    [ii,2]      a6           X_0         { [ii,j] -> [k] :j=2 && k=inter2(ii) }

    // summary access relations are the union of all access relations
    // to a particular data space
    // These can actually be generated automatically by using unions
    // between access relations that access the same data array.
    A_I_0_to_X_0 := name = "A_I_0_to_X_0",
                    { [ii,j] -> [ k ] : k=inter1(ii) && 1<=j<=2 }
                    union { [ii,j] -> [ k ] : k=inter2(ii) && 1<=j<=2 }

    A_I_0_to_FX_0 := name = "A_I_0_to_FX_0",
                     { [ii,j] -> [ k ] : k=inter1(ii) && 1<=j<=2 }
                     union { [ii,j] -> [ k ] : k=inter2(ii) && 1<=j<=2 }

    // Do we also want summary access relations for the index arrays?
    A_I_0_to_INTER1_0 := name = "A_I_0_to_INTER1_0", { [ii,1] -> [ ii ] }
                       union { [ii,2] -> [ ii ] }

    A_I_0_to_INTER2_0 := name = "A_I_0_to_INTER2_0", { [ii,1] -> [ ii ] }
                       union { [ii,2] -> [ ii ] }

Data Dependences
    Only reduction dependences.  It is important to indicate that there are reduction dependences however, because that means each iteration needs to be executed atomically if the loop is being parallelized.
    FIXME: how will we indicate reduction dependences?

Composition and choice of RTRTs
    data reordering
        DataPermuteRTRT
            data_reordering = { [ k ] -> [ r ] : r=sigma( k ) }
            iteration_space = I_0
            data_spaces = [ X_0, FX_0 ]
            access_relation = A_I0_to_X0
            iter_sub_space_relation = { [ ii, j ] -> [ ii ] }
            iag_func_name = CPackHyper
            iag_type = IAG_Permute

    Naming standards
        After any transformation, we are going to assume that a space with the subscript n will be transformed into the same named space with the subscript n+1.  For example I_0 will become I_1.

    iteration reordering
        IterPermuteRTRT
            iter_reordering = { [ i,x ] -> [ k,x ] : k = delta( i ) }
            iteration_space = I_0
            access_relation = A_I_0_to_X_1
            iag_func_name = LexMin
            iag_type = IAG_Permute

------------------------------------------------------------
Automatically Generating Straight-Forward Inspector/Executor
------------------------------------------------------------

Generating the composed inspector

1) DataPermuteRTRT
    a) restrict access_relation to iteration subspace
        input:
            access_relation
            iter_sub_space_relation

        output:
            access_relation_to_traverse = new AccessRelation
                name = access_relation.name
                iter_space = iter_sub_space_relation (
                                [access_relation.iter_space] )
                data_space = access_relation.data_space
                iterspace_to_data =  inverse
                ( iter_sub_space_relation compose (inverse access_relation))


        For the example, output is the following:
          access_relation_to_traverse = new AccessRelation
                name = "A_I_0_sub_to_X_0"
                iter_space = { [ii] : 0 <= ii < n_inter  }
                data_space = X0
                iterspace_to_data := { [a] -> [ k ] : k=inter1(a) }
                                     union { [a] -> [ k ] : k=inter2(a) }

          How we calculated iterspace_to_data:
            access_relation = { [ii,j] -> [ k ] : k=inter1(ii) && 1<=j<=2 }  ...
            iter_sub_space_relation = { [ a, b ] -> [ a ] }
            iter_sub_space_relation compose (inverse access_relation)
                // using Compositions between two relations
            { [k] -> [a] : a=ii && b=j && k=inter1(ii) && 1<=j<=2 }
                // apply S1
            { [k] -> [a] : k=inter1(a) && 1<=j<=2 } // j is existentially quantified
                // apply S2
            { [k] -> [a] : k=inter1(a) } ...

    b) generate code that explicitly creates hypergraph representation of access relation at runtime.
        input:
            access_relation_to_traverse, artt
        output:
            code
                // data index calc for each disjunct in access relation
                #define s1(i_1, ..., i_d) data_index = ...; \
                    Hypergraph_ordered_insert_node([artt.name], \                     count,data_index);
                    count++;

                {
                // initialize variables
                Hypergraph* [artt.name] = Hypergraph_ctor();
                int count=0;
                int data_index=0;
                int t1, ..., ;  // declare index variables omega will use

                // loop that traverses [artt.iter_space]
                for ...
                    s1(i_1, ..., i_d);

                Hypergraph_finalize([argtt.name]);
                }

          For the example, output is the following:
                // this macro captures A_I0_to_X0, count, and data_index
                #define s1(t1) data_index = inter1[t1]; \
                    Hypergraph_ordered_insert_node(A_I0_to_X0,count, \
                    data_index); \
                    data_index = inter2[t1]; \
                    Hypergraph_ordered_insert_node(A_I0_to_X0,count, \
                    data_index); \
                    count++

                // initialize variables
                Hypergraph* A_I0_to_X0 = Hypergraph_ctor();
                int count=0;
                int data_index=0;

                // this specific example
                for(t1 = 0; t1 <= n_inter-1; t1++) {
                    s1(t1);
                }

                Hypergraph_finalize(A_I0_to_X0);


    c) Automatically generate the IndexArray specification for sigma
    FIXME: what if we declare uninterp functions with input and output bounds?
        input:
            DataPermuteRTRT instance
            access_relation_to_traverse

        output:
            iag_spec = new IAG_Permute(
                String name = rtrt.iag_func_name
                AccessRelation input = access_relation_to_traverse
                IndexArray result = new IndexArray(
                    data_space = [name of uninterp func in data_reordering],
                                 [specification from data space in RTRT],
                                 index array,
                    index_value_constraints = { [k] -> [ j ] : j=uninterp(k)
                        not [k has same bounds as data space] ||
                        [uninterp(k) has same bounds as data space] }
                )
            )

        Initial Assumptions:
            -only one interpreted function in data reordering
            -that uninterpreted function has a domain with dimensionality 1

        For this example:
            IAG_cpack = new IAG_Permute (
                String name = "CPackHyper"       // function name
                AccessRelation input = A_I0_to_X0
                IndexArray result = new IndexArray(
                    data_space = "sigma", X_0.spec, index array,
                    index_value_constraints = { [k] -> [sigma(k)] : not (0 <= k <= (N-1)) || (0 <= sigma(k) <= (N-1)) }
                )

            )

    d) generate code that passes hypergraph to IAG
        input:
            iag_spec for sigma

        output:
            code
                [iag_spec.result.data_space.name] = malloc( ... );
                [iag_spec.name]( [iag_spec.input.name],
                                 [iag_spec.result.data_space.name] );

        For this example:
                int *sigma;
                MALLOC(sigma,int,N);
                CPackHyper( A_I0_to_X0, sigma );

    e) generate code that does data reordering
    FIXME: eventually all the data reordering will be done only once per composition.  This example has only one data reordering, so this is somewhat mute.
        input:
            iag_spec for sigma
            DataPermuteRTRT.data_spaces to be reordered

        output:
            code that reorders the specified data spaces with sigma
            // one call to reorderArray for each data space being reordered
            reorderArray((unsigned char*) [data_space.name],
                         sizeof([data_space.datatype]),
                         [data_space.num_elem],
                         [iag_spec.name])

        For this example:
            reorderArray((unsigned char *)x, sizeof(double), NUM_NODES, sigma);
            reorderArray((unsigned char *)fx, sizeof(double), NUM_NODES, sigma);



2) Modify iteration space and access functions based on previous transformation.

    I_0     // iteration space was not modified
    X_1 := X_0    // same size
    FX_1 := FX_0    // same size
    A_I_0_to_X_1 = data_reordering(A_I_0_to_X_0)
                 = { [ k ] -> [ r ] : r=sigma( k ) ] } compose { [ii,j] -> [ k ] : k=inter1(ii) && 1<=j<=2 }
                      // compose two relations
                 = { [ii,j] -> [r] : r=sigma( k ) && k=inter1(ii) && 1<=j<=2}
                      // apply S1
                 = { [ii,j] -> [r] : r=sigma( inter1(ii) ) && 1<=j<=2 } union
                   { [ii,j] -> [r] : r=sigma( inter2(ii) ) && 1<=j<=2 }


    A_I_0_to_FX_1 = data_reordering(A_I_0_to_FX_0)
                  = { [ii,1] -> [ k ] : k= sigma(inter1(ii)) }
                    union { [ii,2] -> [ k ] : k=sigma(inter2(ii)) }


3) (optional) pointer update optimization, or collapsing index arrays
After performing a data reordering, if index arrays that access the reordered data arrays are updated with the new locations of data elements then later inspectors and the final executor will require fewer indirect accesses.
    PU0) note that A_I_0_to_X_1 and A_I_0_to_FX_1 contain sigma(inter1(ii)) and sigma(inter2(ii))
    PU1) { [ii] -> [k] : k=sigma(inter1(ii)) && bounds for inter1 input }
         { [ii] -> [k] : k=sigma(inter2(ii)) && bounds for inter2 input }

    PU2) Do Code Gen for Relation to generate inter1_1 and inter2_1
        #define pu1(t1) inter1_1[t1] = sigma[inter1[t1]]
        for (t1=bounds for inter1 input) {
            pu1(t1)
        }
        // similar for inter2_1

    PU3) modify all access relations by replacing sigma(inter1(t1)) with inter1_1(t1)

4) generate executor code for data reordering only (only for testing)
   Note: eventually we want to generate the composed inspector/executor only, but for testing we need to be able to test as we go.

    input:
        Statements and transformed statement access relations

    output:
        // statement macros
        #define s1(t1, ..., ) ...

        ...

        // new executor loop
        for ...

    algorithm:
        for each statement in computation
            generate macro code for statement using transformed access relations

        have omega or Cloog generate code for current iteration space (ALAN?)


    output for this example:
        // without pointer update
        #define e1(ii,g)    if ((g)==1) { \
            fx[sigma[inter1[ii]]] += x[sigma[inter1[ii]]]*0.1 \
                     + x[sigma[inter2[ii]]]*0.3; \
        } else { \
            fx[sigma[inter2[ii]]] += x[sigma[inter1[ii]]]*0.2  \
                     + x[sigma[inter2[ii]]]*0.4; \
        }
        // with pointer update
        #define e1(ii,g)    if ((g)==1) { \
            fx[inter1_1[ii] += x[inter1_1[ii]]*0.1 \
                     + x[inter2_1[ii]]*0.3; \
        } else { \
            fx[inter2_1[ii]] += x[inter1_1[ii]]*0.2  \
                     + x[inter2_1[ii]]*0.4; \
        }

        ...

        // executor - execute the computation with modified arrays
        for(t1 = 0; t1 <= n_inter-1; t1++) {
            e1(t1,1);
            e1(t1,2);
        }

3) IterPermuteRTRT  (for now done assuming no pointer update has occurred)
    a) restrict access_relation to iteration subspace (same as 1a above)

        For the example, output is the following:
            access_relation_to_traverse = new AccessRelation
                name = "A_I_0_to_X_1"
                iter_space = { [ii] : 0 <= ii < n_inter  }
                data_space = X_1
                iterspace_to_data := { [ii] -> [ sigma(inter1(ii)) ] }
                                     union { [ii] -> [ sigma(inter2(ii)) ] }

    b) generate code that explicitly creates hypergraph generate code that explicitly creates hypergraph representation of access relation at runtime. (same as 1b above)


        For the example, output is the following:
                // this macro captures A_I_0_to_X_1,
                // count, sigma, inter1, inter2, and data_index
                #define s2(t1) data_index = sigma[inter1[t1]]; \
                        Hypergraph_ordered_insert_node(A_I1_to_X1,count, \
                        data_index); \
                        data_index = sigma[inter2[t1]]; \
                        Hypergraph_ordered_insert_node(A_I1_to_X1,count, \
                        data_index); \
                        count++

                {
                // initialize variables
                Hypergraph* A_I_0_to_X_1 = Hypergraph_ctor();
                int count=0;
                int data_index=0;

                // this specific example
                for(t1 = 0; t1 <= n_inter-1; t1++) {
                    s2(t1);
                }

                Hypergraph_finalize(A_I_0_to_X_1);
                }


    c) Automatically generate the IndexArray specification for delta.
    Should this algorithm be a method associated with IterPermuteRTRT?
    FIXME: think we might want to change this by declaring uninterp functions with in and out bounds
        input:
            IterPermuteRTRT instance
            access_relation_to_traverse

        output: (almost the same as 1c, just replace data space with iteration space)
            iag_spec = new IAG_Permute(
                String name = rtrt.iag_func_name
                AccessRelation input = access_relation_to_traverse
                IndexArray result = new IndexArray(
                    data_space = [name of uninterp func in iter_reordering],
                                 [rtrt.iter_space],
                                 index array,
                    index_value_constraints = { [k] -> [ uninterp(k) ] :
                        not [k has same bounds as rtrt.iter_space] ||
                       [uninterp(k) has same bounds as rtrt.iter_space] }
                )
            )

        Initial Assumptions:
            -only one interpreted function in iteration reordering
            -that uninterpreted function has a domain with dimensionality 1


        For this example:
            IAG_lexmin = new IAG_Permute (
                String name = "IAG_lexmin"       // function name
                AccessRelation input = A_I_0_to_X_1
                IndexArray result = new IndexArray(
                    data_space = "delta", I_0.spec, index array,
                    index_value_constraints = { [k] -> [delta(k)] : not (0 <= k <= (n_iter-1)) || (0 <= delta(k) <= (N-1)) }
                )

            )

    d) generate code that passes hypergraph to IAG (same as 1d)

        For this example:
                int *delta;
                MALLOC(delta,int,n_iter);
                IAG_lexmin( A_I_0_to_X_1, delta );

4) Modify iteration space and access functions based on previous transformation.
Since doing a loop permutation, going to modify access relations and NOT the iteration space.  However, going to rename iteration space to indicate that in essence it has been reordered.

    I_1 = I_0       // use same bounds for newly permuted iteration space
    X_1 and FX_1    // were not modified
    A_I_1_to_X_1 =  A_I_1_to_X_1 compose (inverse iter_permute)
                 = { [ii,j] -> [r] : r=sigma( inter1(ii) ) && 1<=j<=2 } ... compose ( [a,b] -> [i,b] : a = delta(i) }
                    // compose 2 relations
                = { [a,b] -> [r] : ii=i && b=j && r=sigma(inter1(ii)) && 1 <=j<=2 && a=delta(i) }
                    // apply S1
                = { [a,b] -> [r] : r=sigma(inter1(i)) && 1 <=b<=2 && a=delta(i)}
                    // apply S3
                = { [a,b] -> [r] : r=sigma(inter1(i)) && 1 <=b<=2 && i=delta_inv(a)}
                    // apply S1 on i = delta_inv(a)
                = { [a,b] -> [r] : r=sigma(inter1(delta_inv(a))) && 1 <=b<=2}

5) (optional) collapsing index arrays, pointer update and array alignment

    Generate code to create new_iag().

    Update access relations.
    { [a,b] -> [r] : r=sigma(inter1(delta_inv(a))) && 1 <=b<=2 && i=delta_inv(a)}
        // apply collapsing index arrays to sigma(inter1(delta_inv(a)))
    { [a,b] -> [r] : r=new_iag(a) && 1 <=b<=2 }

